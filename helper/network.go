package helper

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// Generated by https://quicktype.io

type Network struct {
	Addressrange        string        `json:"addressrange"`
	Addressrange6       string        `json:"addressrange6"`
	Displayname         string        `json:"displayname"`
	Netid               string        `json:"netid"`
	Nodeslastmodified   int           `json:"nodeslastmodified"`
	Networklastmodified int           `json:"networklastmodified"`
	Defaultinterface    string        `json:"defaultinterface"`
	Defaultlistenport   int           `json:"defaultlistenport"`
	Nodelimit           int           `json:"nodelimit"`
	Defaultpostup       string        `json:"defaultpostup"`
	Defaultpostdown     string        `json:"defaultpostdown"`
	Keyupdatetimestamp  int           `json:"keyupdatetimestamp"`
	Defaultkeepalive    int           `json:"defaultkeepalive"`
	Defaultsaveconfig   string        `json:"defaultsaveconfig"`
	Accesskeys          []interface{} `json:"accesskeys"`
	Allowmanualsignup   string        `json:"allowmanualsignup"`
	Islocal             string        `json:"islocal"`
	Isdualstack         string        `json:"isdualstack"`
	Isipv4              string        `json:"isipv4"`
	Isipv6              string        `json:"isipv6"`
	Isgrpchub           string        `json:"isgrpchub"`
	Localrange          string        `json:"localrange"`
	Checkininterval     int           `json:"checkininterval"`
	Defaultudpholepunch string        `json:"defaultudpholepunch"`
	Defaultextclientdns string        `json:"defaultextclientdns"`
	Defaultmtu          int           `json:"defaultmtu"`
}

// GetNetworks - Returns list of coffees (no auth required)
func (c *Client) GetNetworks() ([]Network, error) {

	req, err := http.NewRequest("GET", fmt.Sprintf("%s/api/networks", c.HostURL), nil)
	if err != nil {
		return nil, err
	}

	body, err := c.doRequest(req)
	if err != nil {
		return nil, err
	}
	networks := []Network{}
	err = json.Unmarshal(body, &networks)
	if err != nil {
		return nil, err
	}

	return networks, nil
}

// GetNetworks - Returns a network by ID
func (c *Client) GetNetwork(networkID string) (*Network, error) {

	req, err := http.NewRequest("GET", fmt.Sprintf("%s/api/networks/%s", c.HostURL, networkID), nil)
	if err != nil {
		return nil, err
	}

	body, err := c.doRequest(req)
	if err != nil {
		return nil, err
	}
	network := Network{}
	err = json.Unmarshal(body, &network)
	if err != nil {
		return nil, err
	}

	return &network, nil
}

func (c *Client) CreateNetworkFromSchema(d *schema.ResourceData) (*Network, error) {
	network := CreateNetworkFromSchemaData(d)
	return c.CreateNetwork(*network)
}

// GetNetworks - Create a new network
func (c *Client) CreateNetwork(network Network) (*Network, error) {

	rb, err := json.Marshal(network)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", fmt.Sprintf("%s/api/networks", c.HostURL), strings.NewReader(string(rb)))
	if err != nil {
		return nil, err
	}

	_, err = c.doRequest(req)
	if err != nil {
		return nil, err
	}

	return &network, nil
}

// UpdateNetwork - Updates a network
func (c *Client) UpdateNetwork(network Network) (*Network, error) {

	rb, err := json.Marshal(network)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("PUT", fmt.Sprintf("%s/api/networks/%s", c.HostURL, network.Netid), strings.NewReader(string(rb)))
	if err != nil {
		return nil, err
	}

	body, err := c.doRequest(req)
	if err != nil {
		return nil, err
	}
	network = Network{}
	err = json.Unmarshal(body, &network)
	if err != nil {
		return nil, err
	}

	return &network, nil
}

func (c *Client) UpdateNetworkFromSchema(d *schema.ResourceData) (*Network, error) {
	network := CreateNetworkFromSchemaData(d)
	return c.UpdateNetwork(*network)
}

func (c *Client) UpdateNetworkMap(data map[string]string) (*Network, error) {
	network := Network{}
	mapFiels(data, &network)
	return c.UpdateNetwork(network)
}

func (c *Client) DeleteNetwork(networkID string) error {
	req, err := http.NewRequest("DELETE", fmt.Sprintf("%s/api/networks/%s", c.HostURL, networkID), nil)
	if err != nil {
		return err
	}

	_, err = c.doRequest(req)
	if err != nil {
		return err
	}

	return nil
}

func mapFiels(data map[string]string, network *Network) {
	for k, v := range data {
		switch k {
		case "displayname":
			network.Displayname = v
		case "addressrange":
			network.Addressrange = v
		case "netid":
			network.Netid = v
		case "islocal":
			network.Islocal = v
		case "isDualStack":
			network.Isdualstack = v
		case "isIPv4":
			network.Isipv4 = v
		case "isIPv6":
			network.Isipv6 = v
		case "isGRPCHub":
			network.Isgrpchub = v
		case "localrange":
			network.Localrange = v
		case "checkininterval":
			i, _ := strconv.Atoi(v)
			network.Checkininterval = i
		case "defaultudpholepunch":
			network.Defaultudpholepunch = v
		case "defaultextclientdns":
			network.Defaultextclientdns = v
		case "defaultmtu":
			i, _ := strconv.Atoi(v)
			network.Defaultmtu = i
		case "defaultkeepalive":
			i, _ := strconv.Atoi(v)
			network.Defaultkeepalive = i
		case "allowmanualsignup":
			network.Allowmanualsignup = v
		case "nodeslastmodified":
			network.Nodeslastmodified, _ = strconv.Atoi(v)
		case "networklastmodified":
			network.Networklastmodified, _ = strconv.Atoi(v)
		case "defaultinterface":
			network.Defaultinterface = v
		case "defaultlistenport":
			network.Defaultlistenport, _ = strconv.Atoi(v)
		case "defaultsaveconfig":
			network.Defaultsaveconfig = v
		case "nodelimit":
			network.Nodelimit, _ = strconv.Atoi(v)
		case "defaultpostup":
			network.Defaultpostup = v
		case "defaultpostdown":
			network.Defaultpostdown = v
		case "keyupdatetimestamp":
			network.Keyupdatetimestamp, _ = strconv.Atoi(v)
		}
	}
}

func mapFielsRevert(network *Network) map[string]string {
	data := make(map[string]string)
	data["displayname"] = network.Displayname
	data["addressrange"] = network.Addressrange
	data["netid"] = network.Netid
	data["nodeslastmodified"] = strconv.Itoa(network.Nodeslastmodified)
	data["networklastmodified"] = strconv.Itoa(network.Networklastmodified)
	data["defaultinterface"] = network.Defaultinterface
	data["defaultlistenport"] = strconv.Itoa(network.Defaultlistenport)
	data["nodelimit"] = strconv.Itoa(network.Nodelimit)
	data["defaultpostup"] = network.Defaultpostup
	data["defaultpostdown"] = network.Defaultpostdown
	data["keyupdatetimestamp"] = strconv.Itoa(network.Keyupdatetimestamp)
	data["defaultsaveconfig"] = network.Defaultsaveconfig
	data["defaultmtu"] = strconv.Itoa(network.Defaultmtu)
	data["defaultkeepalive"] = strconv.Itoa(network.Defaultkeepalive)
	data["allowmanualsignup"] = network.Allowmanualsignup
	data["defaultudpholepunch"] = network.Defaultudpholepunch
	data["defaultextclientdns"] = network.Defaultextclientdns
	data["islocal"] = network.Islocal
	data["isDualStack"] = network.Isdualstack
	data["isIPv4"] = network.Isipv4
	data["isIPv6"] = network.Isipv6
	data["isGRPCHub"] = network.Isgrpchub
	data["localrange"] = network.Localrange
	data["checkininterval"] = strconv.Itoa(network.Checkininterval)
	return data
}

func CreateNetworkSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"netid": {
			Type:     schema.TypeString,
			Required: true,
		},
		"addressrange": {
			Type:     schema.TypeString,
			Required: true,
		},
		"addressrange6": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"displayname": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"islocal": {
			Type:     schema.TypeString,
			Computed: true,
			Default:  nil,
		},
		"isdualstack": {
			Type:     schema.TypeString,
			Computed: true,
			Default:  nil,
		},
		"isipv4": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"isipv6": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"isgrpchub": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"localrange": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"checkininterval": {
			Type:     schema.TypeInt,
			Computed: true,
		},

		"defaultudpholepunch": {
			Type:     schema.TypeString,
			Computed: true,
			Default:  nil,
		},
		"defaultextclientdns": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"defaultmtu": {
			Type:     schema.TypeInt,
			Computed: true,
		},
		"defaultkeepalive": {
			Type:     schema.TypeInt,
			Computed: true,
		},
		"allowmanualsignup": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"nodeslastmodified": {
			Type:     schema.TypeInt,
			Computed: true,
		},
		"networklastmodified": {
			Type:     schema.TypeInt,
			Computed: true,
		},
		"defaultinterface": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"defaultlistenport": {
			Type:     schema.TypeInt,
			Computed: true,
		},
		"defaultsaveconfig": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"nodelimit": {
			Type:     schema.TypeInt,
			Computed: true,
		},
		"defaultpostup": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"defaultpostdown": {
			Type:     schema.TypeString,
			Computed: true,
		},
		"keyupdatetimestamp": {
			Type:     schema.TypeInt,
			Computed: true,
		},
	}

}

func CreateNetworkFromSchemaData(d *schema.ResourceData) *Network {
	network := &Network{}
	network.Netid = d.Get("netid").(string)
	network.Addressrange = d.Get("addressrange").(string)
	network.Addressrange6 = d.Get("addressrange6").(string)
	network.Displayname = d.Get("displayname").(string)
	network.Islocal = d.Get("islocal").(string)
	network.Isdualstack = d.Get("isdualstack").(string)
	network.Isipv4 = d.Get("isipv4").(string)
	network.Isipv6 = d.Get("isipv6").(string)
	network.Isgrpchub = d.Get("isgrpchub").(string)
	network.Localrange = d.Get("localrange").(string)
	network.Checkininterval = d.Get("checkininterval").(int)
	network.Defaultudpholepunch = d.Get("defaultudpholepunch").(string)
	network.Defaultextclientdns = d.Get("defaultextclientdns").(string)
	network.Defaultmtu = d.Get("defaultmtu").(int)
	network.Defaultkeepalive = d.Get("defaultkeepalive").(int)
	network.Allowmanualsignup = d.Get("allowmanualsignup").(string)
	network.Nodeslastmodified = d.Get("nodeslastmodified").(int)
	network.Networklastmodified = d.Get("networklastmodified").(int)
	network.Defaultinterface = d.Get("defaultinterface").(string)
	network.Defaultlistenport = d.Get("defaultlistenport").(int)
	network.Defaultsaveconfig = d.Get("defaultsaveconfig").(string)
	network.Nodelimit = d.Get("nodelimit").(int)
	network.Defaultpostup = d.Get("defaultpostup").(string)
	network.Defaultpostdown = d.Get("defaultpostdown").(string)
	network.Keyupdatetimestamp = d.Get("keyupdatetimestamp").(int)
	return network
}

func SetNetworkSchemaData(d *schema.ResourceData, network *Network) error {
	if err := d.Set("netid", network.Netid); err != nil {
		return err
	}
	if err := d.Set("addressrange", network.Addressrange); err != nil {
		return err
	}
	if err := d.Set("addressrange6", network.Addressrange6); err != nil {
		return err
	}
	if err := d.Set("displayname", network.Displayname); err != nil {
		return err
	}
	if err := d.Set("islocal", network.Islocal); err != nil {
		return err
	}
	if err := d.Set("isdualstack", network.Isdualstack); err != nil {
		return err
	}
	if err := d.Set("isipv4", network.Isipv4); err != nil {
		return err
	}
	if err := d.Set("isipv6", network.Isipv6); err != nil {
		return err
	}
	if err := d.Set("isgrpchub", network.Isgrpchub); err != nil {
		return err
	}
	if err := d.Set("localrange", network.Localrange); err != nil {
		return err
	}
	if err := d.Set("checkininterval", network.Checkininterval); err != nil {
		return err
	}

	if err := d.Set("defaultudpholepunch", network.Defaultudpholepunch); err != nil {
		return err
	}
	if err := d.Set("defaultextclientdns", network.Defaultextclientdns); err != nil {
		return err
	}
	if err := d.Set("defaultmtu", network.Defaultmtu); err != nil {
		return err
	}
	if err := d.Set("defaultkeepalive", network.Defaultkeepalive); err != nil {
		return err
	}
	if err := d.Set("allowmanualsignup", network.Allowmanualsignup); err != nil {
		return err
	}
	if err := d.Set("nodeslastmodified", network.Nodeslastmodified); err != nil {
		return err
	}
	return nil
}

func FlattenNetworkData(network *Network) map[string]interface{} {
	oi := make(map[string]interface{})
	oi["netid"] = network.Netid
	oi["addressrange"] = network.Addressrange
	oi["addressrange6"] = network.Addressrange6
	oi["displayname"] = network.Displayname
	oi["islocal"] = network.Islocal
	oi["isdualstack"] = network.Isdualstack
	oi["isipv4"] = network.Isipv4
	oi["isipv6"] = network.Isipv6
	oi["isgrpchub"] = network.Isgrpchub
	oi["localrange"] = network.Localrange
	oi["checkininterval"] = network.Checkininterval
	oi["nodeslastmodified"] = network.Nodeslastmodified
	oi["networklastmodified"] = network.Networklastmodified
	oi["defaultinterface"] = network.Defaultinterface
	oi["defaultlistenport"] = network.Defaultlistenport
	oi["nodelimit"] = network.Nodelimit
	oi["defaultpostup"] = network.Defaultpostup
	oi["defaultpostdown"] = network.Defaultpostdown
	oi["keyupdatetimestamp"] = network.Keyupdatetimestamp
	oi["defaultsaveconfig"] = network.Defaultsaveconfig
	oi["defaultmtu"] = network.Defaultmtu
	oi["defaultkeepalive"] = network.Defaultkeepalive
	oi["allowmanualsignup"] = network.Allowmanualsignup
	oi["defaultudpholepunch"] = network.Defaultudpholepunch
	oi["defaultextclientdns"] = network.Defaultextclientdns
	oi["islocal"] = network.Islocal
	oi["isdualstack"] = network.Isdualstack
	oi["isipv4"] = network.Isipv4
	oi["isipv6"] = network.Isipv6
	oi["isgrpchub"] = network.Isgrpchub
	oi["localrange"] = network.Localrange
	oi["checkininterval"] = network.Checkininterval

	return oi
}

func FlattenNetworksData(networks *[]Network) []interface{} {
	if networks != nil {
		ois := make([]interface{}, len(*networks))
		for i, network := range *networks {
			ois[i] = FlattenNetworkData(&network)
		}

		return ois
	}

	return make([]interface{}, 0)
}
